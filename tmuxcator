#!/usr/bin/env bash
create-config()
{
	# create config directory if not exist
	if [ ! -d "$cfdir" ]; then
		mkdir "$cfdir"
	fi
	# standard template layout 
	template="#!/bin/bash\n#project name and direcotry\n
name=projname\nroot=~/Documents/prog/\n\n# windows\n#Always put the window definition inside '' like the example below. \n#windows=('window_cmd:pane1_cmd'.'window2_cmd:pane2_cmd') \n#each window definition is seperated by . \nwindows=('python:gdb,main-vertical'.'zsh,main-vertical') \n
"
		# create config file if non existant
		if [ ! -f "$cfile" ]; then
			touch "$cfile"
			echo -e "$template" > "$cfile"
		fi
		"$EDITOR" "$cfile"
	}

tmuxination()
{

	source "$cfile"

	if [ -f "$root" ]; then
		mkdir -pv "$root"
		cd "$root"
	else
		cd "$root"
	fi

	#use . as seperator in bash arrays
	local IFS="."

	#assign main layout and commands

	((i=1))
	for window in ${windows[*]};
	do
		winlayout="$(echo $window | cut -d',' -f 2)";
		winlayout="$(echo $winlayout | cut -d' ' -f 1)";
		window="$(echo $window | cut -d',' -f 1)";
		cmdw="$(echo $window | cut -d':' -f 1)";
		if [ "$i" -eq 1 ]; then
			tmux new-session -d -s "$name" $cmdw;
		else
			tmux new-window -t "$name":$i $cmdw;
		fi

		wpanes=($(echo $window | tr ":" "."))
		for wpane in "${wpanes[@]:1}"; do
			#echo 'making pane '$wpane' in window '$i
			#split panes according to config
			tmux split-window -t "$name":$i $wpane
		done
		#set the layout for each window
		tmux select-layout -t "$name":$i $winlayout
		((i+=1));
	done

	# select the main window and join the tmux session
	tmux select-window -t "$name":1
	tmux attach-session -E -t "$name"
}


cfdir="${XDG_CONFIG_HOME:-$HOME/.config}/tmuxcator"
if [ -d "$cfdir" ]; then
	case $1 in
		new | n)
			if [ ! -z "$2" -a "$2" != " " ]; then 
				cfile="$cfdir"/"$2"
				create-config
			else 
				echo "check the <name> of the project"
			fi
			;;
		list | l)
			ls "$cfdir"
			;;
		edit | e)
			cfile="$cfdir"/"$2"
			if [ ! -z "$2" -a "$2" != " " -a -f "$cfile" ]; then 
				$EDITOR "$cfile"
			else 
				echo "check the <name> of the project"
			fi
			;;
		open | o)
			cfile="$cfdir"/"$2"
			if [ ! -z "$2" -a "$2" != " " -a -f "$cfile" ]; then 
				tmuxination
			else 
				echo "check the <name> of the project"
			fi
			;;
		remove | rm)
			cfile="$cfdir"/"$2"
			if [ ! -z "$2" -a "$2" != " " -a -f "$cfile" ]; then 
				rm "$cfile"
				echo "Deleted: " "$cfile"
			else 
				echo "check the <name> of the project"
			fi
			;;
		help | h)
			echo "	TmuxinatorCommands:
	new/n  <name>: new config with name of <name>.
	open/o <name>: open tmux <name> session.
	edit/e <name>: edit <name> config.
	list/l : list configs.
	remove/rm <name>: delete <name> config.
	help/h : show this."
			;;
		*)
			echo "	Tmuxinator Commands:
	new/n  <name>: new config with name of <name>.
	open/o <name>: open tmux <name> session.
	edit/e <name>: edit <name> config.
	list/l : list configs.
	remove/rm <name>: delete <name> config.
	help/h : show this."
			;;
	esac
else
	echo "Config direcoty \"~/.config/tmuxcator\" Doesn't exist"
fi
